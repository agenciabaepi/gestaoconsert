import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';

// Supabase com service role key para for√ßar logout
const supabaseAdmin = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export async function POST(request: NextRequest) {
  try {
    const { access_token, refresh_token, user_id } = await request.json();
    
    console.log('üî¥ FORCE LOGOUT API: Recebida requisi√ß√£o');
    console.log('üî¥ Access Token:', access_token ? 'SIM' : 'N√ÉO');
    console.log('üî¥ Refresh Token:', refresh_token ? 'SIM' : 'N√ÉO');
    console.log('üî¥ User ID:', user_id);
    
    if (!access_token || !user_id) {
      console.log('‚ùå Dados insuficientes para logout');
      return NextResponse.json({ error: 'Token ou user_id n√£o fornecido' }, { status: 400 });
    }

    console.log('üî¥ FORCE LOGOUT API: Iniciando logout for√ßado no backend...');

    // 1. FOR√áAR LOGOUT DE TODAS AS SESS√ïES DO USU√ÅRIO
    console.log('üî¥ Tentando for√ßar logout de todas as sess√µes...');
    const { error: signOutError } = await supabaseAdmin.auth.admin.signOut(user_id);
    
    if (signOutError) {
      console.log('‚ö†Ô∏è Erro ao for√ßar logout de todas as sess√µes:', signOutError.message);
    } else {
      console.log('‚úÖ Logout for√ßado de todas as sess√µes realizado');
    }

    // 2. INVALIDAR TODAS AS SESS√ïES DO USU√ÅRIO
    console.log('üî¥ Tentando invalidar todas as sess√µes...');
    try {
      const { error: invalidateError } = await supabaseAdmin.auth.admin.invalidateUserSessions(user_id);
      
      if (invalidateError) {
        console.log('‚ö†Ô∏è Erro ao invalidar sess√µes do usu√°rio:', invalidateError.message);
      } else {
        console.log('‚úÖ Sess√µes do usu√°rio invalidadas com sucesso');
      }
    } catch (invalidateError) {
      console.log('‚ö†Ô∏è Erro ao invalidar sess√µes:', invalidateError);
    }

    // 3. ATUALIZAR METADATA DO USU√ÅRIO
    console.log('üî¥ Tentando atualizar metadata...');
    const { error: updateError } = await supabaseAdmin.auth.admin.updateUserById(
      user_id,
      { 
        user_metadata: { 
          force_logout: Date.now(),
          last_logout: new Date().toISOString()
        } 
      }
    );

    if (updateError) {
      console.log('‚ö†Ô∏è Erro ao atualizar metadata:', updateError.message);
    } else {
      console.log('‚úÖ Metadata atualizada com sucesso');
    }

    console.log('‚úÖ FORCE LOGOUT API: Logout for√ßado conclu√≠do');

    return NextResponse.json({ 
      success: true, 
      message: 'Sess√£o for√ßadamente encerrada',
      timestamp: Date.now()
    });

  } catch (error) {
    console.error('‚ùå Erro no force logout API:', error);
    return NextResponse.json({ 
      error: 'Erro interno do servidor' 
    }, { status: 500 });
  }
}
