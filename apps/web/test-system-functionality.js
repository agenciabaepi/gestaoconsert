const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

async function testSystemFunctionality() {
  console.log('üîç Testando funcionalidades do sistema...');
  
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  );
  
  try {
    // Teste 1: Verificar se existem empresas
    console.log('\n1Ô∏è‚É£ Testando tabela de empresas...');
    const { data: empresas, error: empresasError } = await supabase
      .from('empresas')
      .select('id, nome, ativo')
      .limit(5);
    
    if (empresasError) {
      console.log('‚ùå Erro ao buscar empresas:', empresasError.message);
    } else {
      console.log(`‚úÖ Encontradas ${empresas.length} empresas`);
      if (empresas.length > 0) {
        console.log('üìä Primeira empresa:', empresas[0]);
      }
    }
    
    // Teste 2: Verificar usu√°rios
    console.log('\n2Ô∏è‚É£ Testando tabela de usu√°rios...');
    const { data: usuarios, error: usuariosError } = await supabase
      .from('usuarios')
      .select('id, email, nome')
      .limit(3);
    
    if (usuariosError) {
      console.log('‚ùå Erro ao buscar usu√°rios:', usuariosError.message);
    } else {
      console.log(`‚úÖ Encontrados ${usuarios.length} usu√°rios`);
    }
    
    // Teste 3: Verificar ordens de servi√ßo
    console.log('\n3Ô∏è‚É£ Testando tabela de ordens de servi√ßo...');
    const { data: ordens, error: ordensError } = await supabase
      .from('ordens_servico')
      .select('id, numero_os, status')
      .limit(3);
    
    if (ordensError) {
      console.log('‚ùå Erro ao buscar ordens:', ordensError.message);
    } else {
      console.log(`‚úÖ Encontradas ${ordens.length} ordens de servi√ßo`);
    }
    
    // Teste 4: Verificar clientes
    console.log('\n4Ô∏è‚É£ Testando tabela de clientes...');
    const { data: clientes, error: clientesError } = await supabase
      .from('clientes')
      .select('id, nome, email')
      .limit(3);
    
    if (clientesError) {
      console.log('‚ùå Erro ao buscar clientes:', clientesError.message);
    } else {
      console.log(`‚úÖ Encontrados ${clientes.length} clientes`);
    }
    
    // Teste 5: Verificar schema da tabela ordens_servico
    console.log('\n5Ô∏è‚É£ Verificando schema da tabela ordens_servico...');
    const { data: schemaInfo, error: schemaError } = await supabase
      .rpc('get_table_columns', { table_name: 'ordens_servico' })
      .single();
    
    if (schemaError) {
      console.log('‚ö†Ô∏è  N√£o foi poss√≠vel verificar schema automaticamente');
      // Teste alternativo: tentar inserir dados de teste
      console.log('üîÑ Testando inser√ß√£o de dados...');
      const { data: testInsert, error: insertError } = await supabase
        .from('ordens_servico')
        .select('description')
        .limit(1);
      
      if (insertError && insertError.message.includes('description')) {
        console.log('‚ùå Coluna "description" n√£o encontrada na tabela ordens_servico');
      } else {
        console.log('‚úÖ Schema da tabela parece estar correto');
      }
    }
    
    // Teste 6: Verificar RLS (Row Level Security)
    console.log('\n6Ô∏è‚É£ Testando pol√≠ticas RLS...');
    const supabaseAnon = createClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
    );
    
    const { data: rlsTest, error: rlsError } = await supabaseAnon
      .from('empresas')
      .select('id')
      .limit(1);
    
    if (rlsError) {
      console.log('‚ö†Ô∏è  RLS pode estar bloqueando acesso an√¥nimo:', rlsError.message);
    } else {
      console.log('‚úÖ RLS configurado corretamente');
    }
    
    console.log('\nüéØ Resumo do diagn√≥stico:');
    console.log('- Conex√£o com banco: ‚úÖ Funcionando');
    console.log('- Tabelas principais: ‚úÖ Acess√≠veis');
    console.log('- Vari√°veis de ambiente: ‚úÖ Configuradas');
    
  } catch (error) {
    console.log('‚ùå Erro geral:', error.message);
  }
}

testSystemFunctionality().catch(console.error);