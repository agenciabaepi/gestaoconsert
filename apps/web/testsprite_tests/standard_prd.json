{
  "meta": {
    "project": "Sistema Consert",
    "date": "2025-09-11",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "Sistema Consert is a service order management platform designed for technical repair shops, providing authentication, order tracking, client and equipment management, and integration with payment and communication services.",
  "core_goals": [
    "Enable administrators, technicians, and attendants to efficiently manage service orders.",
    "Provide secure authentication and role-based access control.",
    "Allow creation, editing, and status tracking of service orders with notifications.",
    "Maintain detailed client and equipment records with service history.",
    "Integrate with Supabase for backend, Mercado Pago for payments, and WhatsApp for communication.",
    "Ensure high performance and availability with secure operations."
  ],
  "key_features": [
    "User authentication with role-based access control (admin, technician, attendant).",
    "Create, view, and edit service orders with status tracking (pending, in progress, completed).",
    "Client and equipment management including service history tracking.",
    "Notifications system for clients and technicians.",
    "Integration with Supabase database backend.",
    "Payment processing via Mercado Pago integration.",
    "WhatsApp API integration for messaging.",
    "Reusable UI components for consistency across the platform.",
    "Centralized error handling for robust operation.",
    "API health check endpoint for system monitoring."
  ],
  "user_flow_summary": [
    "Users authenticate via a login page with access levels restricting route access.",
    "Administrators and technicians create or edit service orders, associating clients and equipment.",
    "Users track the status of service orders and receive notifications on updates.",
    "Client information and equipment details are managed through dedicated pages.",
    "Payments related to service orders are processed securely through Mercado Pago.",
    "Users send communications through integrated WhatsApp messaging endpoints.",
    "System health is monitored via the health check API endpoint."
  ],
  "validation_criteria": [
    "All user roles must be able to login and have appropriate access restrictions.",
    "Service orders can be created, edited, viewed, and have their status updated correctly.",
    "Client and equipment data are saved and retrievable with historical context.",
    "Payment transactions through Mercado Pago complete successfully and securely.",
    "WhatsApp messaging endpoints send and receive messages correctly.",
    "UI components render consistently and support accessibility.",
    "API responses meet performance criteria with under 2 seconds latency on critical actions.",
    "System uptime is maintained at 99.9% with monitoring endpoints responsive.",
    "Security measures are effective, preventing unauthorized access and protecting against common threats."
  ],
  "code_summary": {
    "tech_stack": [
      "JavaScript",
      "TypeScript",
      "Next.js",
      "React",
      "Supabase",
      "Tailwind CSS",
      "Node.js"
    ],
    "features": [
      {
        "name": "Authentication",
        "description": "Handles user login, logout, session management, and protects routes based on user roles and authentication status.",
        "files": [
          "src/app/login/page.tsx",
          "src/context/AuthContext.tsx",
          "src/hooks/useAuthGuard.ts",
          "src/utils/authUtils.ts",
          "src/utils/clearAuth.ts"
        ]
      },
      {
        "name": "Order Management (OS)",
        "description": "Allows creation, viewing, and editing of service orders, including status tracking and associated client/equipment data.",
        "files": [
          "src/app/nova-os/page.tsx",
          "src/app/ordens/page.tsx",
          "src/app/os/page.tsx",
          "src/app/api/ordens/criar/route.ts",
          "src/hooks/useOSLoading.ts",
          "src/hooks/useOrdens.ts"
        ]
      },
      {
        "name": "Client Management",
        "description": "Manages client information, including creation, viewing, and editing client details.",
        "files": [
          "src/app/clientes/page.tsx",
          "src/types/cliente.ts"
        ]
      },
      {
        "name": "Equipment Management",
        "description": "Manages equipment details associated with service orders.",
        "files": [
          "src/app/equipamentos/page.tsx"
        ]
      },
      {
        "name": "WhatsApp Integration",
        "description": "Provides API endpoints for connecting to WhatsApp and sending messages.",
        "files": [
          "src/app/api/whatsapp/connect/route.ts",
          "src/app/api/whatsapp/enviar/route.ts"
        ]
      },
      {
        "name": "Mercado Pago Integration",
        "description": "Handles payment processing through Mercado Pago.",
        "files": [
          "src/lib/mercadopago.ts"
        ]
      },
      {
        "name": "Supabase Client",
        "description": "Utility for interacting with the Supabase backend.",
        "files": [
          "src/lib/supabase/supabaseClient.ts"
        ]
      },
      {
        "name": "UI Components",
        "description": "Reusable UI components used throughout the application.",
        "files": [
          "src/components/Badge.tsx",
          "src/components/Button.tsx",
          "src/components/Dialog.tsx",
          "src/components/Input.tsx",
          "src/components/Select.tsx",
          "src/components/Toast.tsx"
        ]
      },
      {
        "name": "Error Handling",
        "description": "Centralized error handling utility.",
        "files": [
          "src/utils/errorHandler.ts"
        ]
      },
      {
        "name": "Health Check API",
        "description": "API endpoint for checking the application's health status.",
        "files": [
          "src/app/api/health-check/route.ts"
        ]
      }
    ]
  }
}
