#!/bin/bash

echo "üîç AN√ÅLISE AUTOM√ÅTICA DE LOGS - GEST√ÉO CONSERT"
echo "=============================================="

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

LOG_DIR="/var/log/gestao-consert"
REPORT_FILE="$LOG_DIR/analysis-report-$(date '+%Y%m%d_%H%M%S').txt"

echo -e "${BLUE}üìä GERANDO RELAT√ìRIO DE AN√ÅLISE...${NC}"
echo "Relat√≥rio ser√° salvo em: $REPORT_FILE"

# Criar relat√≥rio
cat > $REPORT_FILE << 'EOF'
üîç RELAT√ìRIO DE AN√ÅLISE - GEST√ÉO CONSERT
========================================
Data: $(date '+%Y-%m-%d %H:%M:%S')
EOF

echo -e "\n${YELLOW}üìã 1. STATUS DO SISTEMA PM2:${NC}"
echo "================================" | tee -a $REPORT_FILE
pm2 status | tee -a $REPORT_FILE

echo -e "\n${YELLOW}üìä 2. AN√ÅLISE DE RECURSOS:${NC}"
echo "=========================" | tee -a $REPORT_FILE
echo "Uso de mem√≥ria:" | tee -a $REPORT_FILE
free -h | tee -a $REPORT_FILE
echo "" | tee -a $REPORT_FILE
echo "Uso de disco:" | tee -a $REPORT_FILE
df -h / | tee -a $REPORT_FILE
echo "" | tee -a $REPORT_FILE
echo "Processos Node.js:" | tee -a $REPORT_FILE
ps aux | grep node | grep -v grep | tee -a $REPORT_FILE

echo -e "\n${YELLOW}üîç 3. AN√ÅLISE DE LOGS DO PM2:${NC}"
echo "=============================" | tee -a $REPORT_FILE

# Verificar se h√° logs de aplica√ß√£o
if [ -d "/root/.pm2/logs" ]; then
    echo "Logs encontrados em /root/.pm2/logs:" | tee -a $REPORT_FILE
    ls -la /root/.pm2/logs/ | tee -a $REPORT_FILE
    
    echo -e "\n${BLUE}üìù √öltimos 20 logs de erro:${NC}" | tee -a $REPORT_FILE
    find /root/.pm2/logs -name "*error*" -exec tail -20 {} \; | tee -a $REPORT_FILE
    
    echo -e "\n${BLUE}üìù √öltimos 20 logs de sa√≠da:${NC}" | tee -a $REPORT_FILE
    find /root/.pm2/logs -name "*out*" -exec tail -20 {} \; | tee -a $REPORT_FILE
else
    echo "‚ùå Diret√≥rio de logs do PM2 n√£o encontrado" | tee -a $REPORT_FILE
fi

echo -e "\n${YELLOW}üåê 4. AN√ÅLISE DE CONECTIVIDADE:${NC}"
echo "===============================" | tee -a $REPORT_FILE

# Verificar conectividade
echo "Teste de conectividade:" | tee -a $REPORT_FILE
if ping -c 3 8.8.8.8 &> /dev/null; then
    echo "‚úÖ Internet: OK" | tee -a $REPORT_FILE
else
    echo "‚ùå Internet: FALHA" | tee -a $REPORT_FILE
fi

# Verificar porta 3000
echo "" | tee -a $REPORT_FILE
echo "Status da porta 3000:" | tee -a $REPORT_FILE
if netstat -tlnp | grep :3000; then
    echo "‚úÖ Porta 3000: ATIVA" | tee -a $REPORT_FILE
else
    echo "‚ùå Porta 3000: INATIVA" | tee -a $REPORT_FILE
fi

# Verificar conex√µes ativas
echo "" | tee -a $REPORT_FILE
echo "Conex√µes ativas na porta 3000:" | tee -a $REPORT_FILE
netstat -an | grep :3000 | grep ESTABLISHED | wc -l | tee -a $REPORT_FILE

echo -e "\n${YELLOW}üîç 5. AN√ÅLISE DE LOGS ESPEC√çFICOS:${NC}"
echo "=================================" | tee -a $REPORT_FILE

# Verificar logs de timeout
if [ -f "$LOG_DIR/timeouts.log" ]; then
    echo -e "\n${RED}‚è∞ TIMEOUTS DETECTADOS:${NC}" | tee -a $REPORT_FILE
    echo "Total de timeouts: $(wc -l < $LOG_DIR/timeouts.log)" | tee -a $REPORT_FILE
    echo "√öltimos 10 timeouts:" | tee -a $REPORT_FILE
    tail -10 $LOG_DIR/timeouts.log | tee -a $REPORT_FILE
else
    echo "‚úÖ Nenhum timeout registrado" | tee -a $REPORT_FILE
fi

# Verificar logs de erro
if [ -f "$LOG_DIR/errors.log" ]; then
    echo -e "\n${RED}‚ùå ERROS DETECTADOS:${NC}" | tee -a $REPORT_FILE
    echo "Total de erros: $(wc -l < $LOG_DIR/errors.log)" | tee -a $REPORT_FILE
    echo "√öltimos 10 erros:" | tee -a $REPORT_FILE
    tail -10 $LOG_DIR/errors.log | tee -a $REPORT_FILE
else
    echo "‚úÖ Nenhum erro registrado" | tee -a $REPORT_FILE
fi

# Verificar logs de carregamento
if [ -f "$LOG_DIR/loading.log" ]; then
    echo -e "\n${BLUE}‚è≥ EVENTOS DE CARREGAMENTO:${NC}" | tee -a $REPORT_FILE
    echo "Total de eventos: $(wc -l < $LOG_DIR/loading.log)" | tee -a $REPORT_FILE
    echo "√öltimos 10 eventos:" | tee -a $REPORT_FILE
    tail -10 $LOG_DIR/loading.log | tee -a $REPORT_FILE
else
    echo "‚ÑπÔ∏è Nenhum evento de carregamento registrado" | tee -a $REPORT_FILE
fi

# Verificar logs de problemas de usu√°rio
if [ -f "$LOG_DIR/user-loading-debug/user-issues.log" ]; then
    echo -e "\n${PURPLE}üë§ PROBLEMAS DE USU√ÅRIO:${NC}" | tee -a $REPORT_FILE
    echo "Total de problemas: $(wc -l < $LOG_DIR/user-loading-debug/user-issues.log)" | tee -a $REPORT_FILE
    echo "√öltimos 10 problemas:" | tee -a $REPORT_FILE
    tail -10 $LOG_DIR/user-loading-debug/user-issues.log | tee -a $REPORT_FILE
else
    echo "‚ÑπÔ∏è Nenhum problema de usu√°rio registrado" | tee -a $REPORT_FILE
fi

echo -e "\n${YELLOW}üîç 6. AN√ÅLISE DE PADR√ïES:${NC}"
echo "=======================" | tee -a $REPORT_FILE

# Analisar padr√µes de erro nos logs do PM2
if [ -d "/root/.pm2/logs" ]; then
    echo "Padr√µes de erro mais frequentes:" | tee -a $REPORT_FILE
    find /root/.pm2/logs -name "*error*" -exec grep -h "Error\|ERROR\|error" {} \; | \
    sort | uniq -c | sort -nr | head -10 | tee -a $REPORT_FILE
    
    echo "" | tee -a $REPORT_FILE
    echo "Padr√µes de timeout mais frequentes:" | tee -a $REPORT_FILE
    find /root/.pm2/logs -name "*error*" -exec grep -h "timeout\|TIMEOUT\|ECONNRESET\|ETIMEDOUT" {} \; | \
    sort | uniq -c | sort -nr | head -10 | tee -a $REPORT_FILE
fi

echo -e "\n${YELLOW}üìã 7. RECOMENDA√á√ïES:${NC}"
echo "===================" | tee -a $REPORT_FILE

# Gerar recomenda√ß√µes baseadas na an√°lise
echo "Baseado na an√°lise, aqui est√£o as recomenda√ß√µes:" | tee -a $REPORT_FILE
echo "" | tee -a $REPORT_FILE

# Verificar uso de mem√≥ria
MEMORY_USAGE=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
if [ $MEMORY_USAGE -gt 80 ]; then
    echo "üî¥ ALTA: Uso de mem√≥ria est√° em ${MEMORY_USAGE}% - considere reiniciar a aplica√ß√£o" | tee -a $REPORT_FILE
fi

# Verificar uso de disco
DISK_USAGE=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
if [ $DISK_USAGE -gt 80 ]; then
    echo "üî¥ ALTA: Uso de disco est√° em ${DISK_USAGE}% - limpe logs antigos" | tee -a $REPORT_FILE
fi

# Verificar se h√° muitos erros
if [ -f "$LOG_DIR/errors.log" ] && [ $(wc -l < $LOG_DIR/errors.log) -gt 50 ]; then
    echo "üî¥ ALTA: Muitos erros detectados - verifique configura√ß√£o do Supabase" | tee -a $REPORT_FILE
fi

# Verificar se h√° muitos timeouts
if [ -f "$LOG_DIR/timeouts.log" ] && [ $(wc -l < $LOG_DIR/timeouts.log) -gt 20 ]; then
    echo "üî¥ ALTA: Muitos timeouts - verifique conectividade com Supabase" | tee -a $REPORT_FILE
fi

echo "" | tee -a $REPORT_FILE
echo "‚úÖ Recomenda√ß√µes gerais:" | tee -a $REPORT_FILE
echo "‚Ä¢ Monitore os logs regularmente" | tee -a $REPORT_FILE
echo "‚Ä¢ Configure alertas para timeouts" | tee -a $REPORT_FILE
echo "‚Ä¢ Verifique configura√ß√µes do Supabase" | tee -a $REPORT_FILE
echo "‚Ä¢ Considere aumentar timeout de requests" | tee -a $REPORT_FILE

echo -e "\n${GREEN}üéâ AN√ÅLISE CONCLU√çDA!${NC}"
echo -e "${BLUE}üìÑ Relat√≥rio salvo em: $REPORT_FILE${NC}"

echo -e "\n${YELLOW}üìã RESUMO R√ÅPIDO:${NC}"
echo "=================="
echo "‚Ä¢ Status PM2: $(pm2 status | grep -c online) processos online"
echo "‚Ä¢ Uso de mem√≥ria: ${MEMORY_USAGE}%"
echo "‚Ä¢ Uso de disco: ${DISK_USAGE}%"
if [ -f "$LOG_DIR/errors.log" ]; then
    echo "‚Ä¢ Erros registrados: $(wc -l < $LOG_DIR/errors.log)"
fi
if [ -f "$LOG_DIR/timeouts.log" ]; then
    echo "‚Ä¢ Timeouts registrados: $(wc -l < $LOG_DIR/timeouts.log)"
fi

echo -e "\n${BLUE}üí° Para ver o relat√≥rio completo:${NC}"
echo "cat $REPORT_FILE"
